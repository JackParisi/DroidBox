package com.github.giacomoparisi.droidbox.logs

import com.github.giacomoparisi.droidbox.architecture.model.exception.ManagedException
import io.reactivex.exceptions.CompositeException
import io.reactivex.plugins.RxJavaPlugins
import retrofit2.HttpException
import timber.log.Timber
import java.net.SocketException
import java.net.SocketTimeoutException
import java.net.UnknownHostException
import java.util.concurrent.TimeoutException

/**
 * Created by Giacomo Parisi on 30/06/2017.
 * https://github.com/giacomoParisi
 */

object LogUtils {

    /**
     *
     * Initialize the Logging/CrashReporting system based on the build type
     *
     * @param debug Set it to true for debug release
     */
    fun initLoggingAndCrashReporting(debug: Boolean) {
        Timber.plant(if (debug)
            Timber.DebugTree()
        else
            CrashReportingTree())

        //        if (debug) {
        //            Thread.setDefaultUncaughtExceptionHandler((paramThread, paramThrowable) ->
        //            {
        //                Timber.e(paramThrowable);
        //                System.exit(2); //Prevents the service/app from freezing
        //            });
        //        }

        RxJavaPlugins.setErrorHandler(LogErrorHandler())
    }

    /**
     *
     * Check if the exception is generated by a network error
     *
     * @param throwable The exception that need to be checked
     * @return True is throwable is generated by a connection error
     */
    fun isConnectionError(throwable: Throwable): Boolean {
        if (throwable is UnknownHostException || throwable is SocketException || throwable is SocketTimeoutException
                || throwable is HttpException || throwable is TimeoutException) {
            return true
        }
        return false
    }

    /**
     *
     * Check if the exception cen be shown to the user
     *
     * @param throwable The exception that need to be checked
     * @return True if the exception can be shown to the user
     */
    private fun isExceptionToBeLogged(throwable: Throwable): Boolean {
        if (throwable is ManagedException || isConnectionError(throwable)) {
            return false
        }
        if (throwable is CompositeException) {
            return existsExceptionToBeLogged((throwable).exceptions)
        }
        return true
    }

    /**
     *
     * Check if the exceptions list cen be shown to the user
     *
     * @param exceptions The exceptions list that need to be checked
     * @return True if the exception list can be shown to the user
     */
    private fun existsExceptionToBeLogged(exceptions: List<Throwable>): Boolean {
        return exceptions.any { isExceptionToBeLogged(it) }
    }
}
